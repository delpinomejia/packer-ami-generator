# 🚀 Production-Ready AWS AMI Builder - GitHub Actions Pipeline
# This workflow validates, estimates costs, and builds AWS AMIs using Packer

name: 🎯 AMI Builder CI/CD

# Trigger workflow on push to master branch or pull requests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: us-east-1
  PACKER_VERSION: '1.9.4'

jobs:
  # 🔍 Validation Stage - Check template syntax and configuration
  validate:
    name: 🔍 Validate Template
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🛠️ Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: ${{ env.PACKER_VERSION }}
    
    - name: 🔧 Initialize Packer Plugins
      run: |
        echo "🔧 Initializing Packer plugins..."
        packer init packer.pkr.hcl
        echo "✅ Packer plugins initialized!"
    
    - name: ✅ Validate Packer Template
      run: |
        echo "🔍 Validating Packer template..."
        packer validate -var-file="variables.pkrvars.hcl" packer.pkr.hcl
        echo "✅ Template validation successful!"
    
    - name: 📋 Template Inspection
      run: |
        echo "📋 Inspecting template configuration..."
        packer inspect packer.pkr.hcl

  # 💰 Cost Estimation Stage - Calculate build costs
  cost-estimate:
    name: 💰 Cost Estimation
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📊 Calculate Build Costs
      run: |
        echo "💰 Calculating estimated build costs..."
        
        # Extract instance type from variables file
        INSTANCE_TYPE=$(grep 'instance_type' variables.pkrvars.hcl | cut -d'"' -f2)
        echo "📦 Instance Type: $INSTANCE_TYPE"
        
        # Cost calculation (basic estimation)
        case $INSTANCE_TYPE in
          "t3.nano")   COST_PER_HOUR=0.0052 ;;
          "t3.micro")  COST_PER_HOUR=0.0104 ;;
          "t3.small")  COST_PER_HOUR=0.0208 ;;
          "t3.medium") COST_PER_HOUR=0.0416 ;;
          *) COST_PER_HOUR=0.0208 ;;  # Default to t3.small
        esac
        
        # Estimate 25-minute build time
        BUILD_DURATION_HOURS=$(echo "scale=4; 25/60" | bc -l)
        ESTIMATED_COST=$(echo "scale=2; $COST_PER_HOUR * $BUILD_DURATION_HOURS" | bc -l)
        
        echo "💵 ESTIMATED BUILD COST BREAKDOWN"
        echo "═══════════════════════════════"
        echo "📦 Instance: $INSTANCE_TYPE @ \$$COST_PER_HOUR/hour"
        echo "⏱️  Duration: ~25 minutes"
        echo "💾 Storage: ~\$0.01 (temporary)"
        echo "🌐 Data Transfer: Minimal"
        echo "═══════════════════════════════"
        echo "💰 TOTAL ESTIMATED COST: ~\$$ESTIMATED_COST"
        
        # Save cost estimate for artifacts
        echo "ESTIMATED_COST=$ESTIMATED_COST" >> cost_estimate.env
        echo "INSTANCE_TYPE=$INSTANCE_TYPE" >> cost_estimate.env
    
    - name: 📁 Upload Cost Estimate
      uses: actions/upload-artifact@v4
      with:
        name: cost-estimate
        path: cost_estimate.env
        retention-days: 30

  # 💰 Cost Approval Stage - Manual review of estimated costs
  cost-approval:
    name: 💰 Cost Approval
    runs-on: ubuntu-latest
    needs: [validate, cost-estimate]
    environment: cost-review  # Requires manual approval for costs
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📁 Download Cost Estimate
      uses: actions/download-artifact@v4
      with:
        name: cost-estimate
    
    - name: 💰 Display Cost Estimate for Approval
      run: |
        echo "💰 COST ESTIMATE REVIEW"
        echo "═══════════════════════"
        if [ -f cost_estimate.env ]; then
          source cost_estimate.env
          echo "💵 Estimated Build Cost: $ESTIMATED_COST"
          echo "📦 Instance Type: $INSTANCE_TYPE"
          echo "⏱️  Estimated Duration: ~25 minutes"
          echo "🌐 Region: ${{ env.AWS_REGION }}"
          echo ""
          echo "⚠️  MANUAL APPROVAL REQUIRED"
          echo "Please review the cost estimate above."
          echo "If acceptable, approve this workflow to proceed with the AMI build."
          echo "Otherwise, cancel this workflow to avoid charges."
        else
          echo "❌ Cost estimate file not found!"
          exit 1
        fi

  # 🏗️ Build Stage - Create AMI (after cost approval)
  build:
    name: 🏗️ Build AMI
    runs-on: ubuntu-latest
    needs: [validate, cost-estimate, cost-approval]
    environment: production  # Additional approval for production build
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📁 Download Cost Estimate
      uses: actions/download-artifact@v4
      with:
        name: cost-estimate
    
    - name: 📊 Display Build Information
      run: |
        echo "🏗️ Starting AMI build process..."
        if [ -f cost_estimate.env ]; then
          source cost_estimate.env
          echo "💰 Estimated build cost: \$$ESTIMATED_COST"
          echo "📦 Instance type: $INSTANCE_TYPE"
        fi
    
    - name: 🛠️ Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: ${{ env.PACKER_VERSION }}
    
    - name: 🔧 Initialize Packer Plugins
      run: |
        echo "🔧 Initializing Packer plugins..."
        packer init packer.pkr.hcl
        echo "✅ Packer plugins initialized!"
    
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🏗️ Build AMI with Packer
      run: |
        echo "🚀 Building AMI..."
        packer build -var-file="variables.pkrvars.hcl" packer.pkr.hcl
        echo "✅ AMI build completed successfully!"
    
    - name: 📋 Capture Build Artifacts
      run: |
        echo "📋 Capturing build information..."
        # Extract AMI ID from Packer output (if available in logs)
        echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> build_info.env
        echo "BUILD_STATUS=success" >> build_info.env
    
    - name: 📁 Upload Build Information
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build_info.env
        retention-days: 90

  # 🔍 Verification Stage - Verify AMI availability
  verify:
    name: 🔍 Verify AMI
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 📁 Download Build Information
      uses: actions/download-artifact@v4
      with:
        name: build-info
    
    - name: ✅ Verify AMI Availability
      run: |
        echo "🔍 Verifying AMI availability..."
        
        # Get AMI name prefix from variables
        AMI_PREFIX=$(grep 'ami_name_prefix' variables.pkrvars.hcl | cut -d'"' -f2)
        echo "🔍 Searching for AMIs with prefix: $AMI_PREFIX"
        
        # List recent AMIs
        aws ec2 describe-images \
          --owners self \
          --filters "Name=name,Values=${AMI_PREFIX}*" \
          --query 'Images[*].{Name:Name,ImageId:ImageId,State:State,CreationDate:CreationDate}' \
          --output table
        
        echo "✅ AMI verification completed!"

  # 📊 Report Stage - Generate comprehensive build report
  report:
    name: 📊 Build Report
    runs-on: ubuntu-latest
    needs: [validate, cost-estimate, cost-approval, build, verify]
    if: always()  # Run even if previous jobs fail
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📁 Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: 📊 Generate Build Report
      run: |
        echo "📊 Generating comprehensive build report..."
        
        REPORT_FILE="build-report-$(date +%Y%m%d-%H%M%S).md"
        
        cat > "$REPORT_FILE" << EOF
        # 🎯 AMI Build Report
        
        **Build Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Workflow:** ${{ github.run_id }}
        
        ## 📋 Build Summary
        
        | Stage | Status |
        |-------|---------|
        | 🔍 Validation | ${{ needs.validate.result }} |
        | 💰 Cost Estimation | ${{ needs.cost-estimate.result }} |
        | 💰 Cost Approval | ${{ needs.cost-approval.result }} |
        | 🏗️ Build | ${{ needs.build.result }} |
        | ✅ Verification | ${{ needs.verify.result }} |
        
        ## 💰 Cost Information
        EOF
        
        if [ -f artifacts/cost-estimate/cost_estimate.env ]; then
          # Safely read cost estimate variables
          ESTIMATED_COST=$(grep '^ESTIMATED_COST=' artifacts/cost-estimate/cost_estimate.env | cut -d'=' -f2 | tr -d '"')
          INSTANCE_TYPE=$(grep '^INSTANCE_TYPE=' artifacts/cost-estimate/cost_estimate.env | cut -d'=' -f2 | tr -d '"')
          echo "- **Estimated Cost:** \$$ESTIMATED_COST" >> "$REPORT_FILE"
          echo "- **Instance Type:** $INSTANCE_TYPE" >> "$REPORT_FILE"
        fi
        
        echo "" >> "$REPORT_FILE"
        echo "## 🏗️ Build Details" >> "$REPORT_FILE"
        
        if [ -f artifacts/build-info/build_info.env ]; then
          # Safely read build info variables
          BUILD_STATUS=$(grep '^BUILD_STATUS=' artifacts/build-info/build_info.env | cut -d'=' -f2 | tr -d '"')
          BUILD_TIMESTAMP=$(grep '^BUILD_TIMESTAMP=' artifacts/build-info/build_info.env | cut -d'=' -f2 | tr -d '"')
          echo "- **Build Status:** $BUILD_STATUS" >> "$REPORT_FILE"
          echo "- **Build Completed:** $BUILD_TIMESTAMP" >> "$REPORT_FILE"
        fi
        
        echo "" >> "$REPORT_FILE"
        echo "---" >> "$REPORT_FILE"
        echo "*Generated by GitHub Actions - AWS AMI Builder Pipeline*" >> "$REPORT_FILE"
        
        echo "📋 Build report generated: $REPORT_FILE"
        cat "$REPORT_FILE"
    
    - name: 📁 Upload Build Report
      uses: actions/upload-artifact@v4
      with:
        name: build-report
        path: build-report-*.md
        retention-days: 365
