# =====================================================
# GitLab CI Pipeline for Ubuntu AMI Builder
# =====================================================

stages:
  - validate
  - build
  - deploy

variables:
  # Packer configuration
  PACKER_LOG: "1"
  PACKER_CONFIG_FILE: "variables.pkrvars.hcl"
  PACKER_TEMPLATE: "packer.pkr.hcl"
  
  # Docker image for Packer
  PACKER_IMAGE: "hashicorp/packer:latest"

# Validate Packer configuration
validate-job:
  stage: validate
  image: $PACKER_IMAGE
  before_script:
    - echo "üîß Setting up environment..."
    - echo "AWS Region:" $AWS_DEFAULT_REGION
    - echo "Packer version:"
    - packer version
  script:
    - echo "‚úÖ Validating Packer configuration..."
    - packer validate \
        -var "aws_region=$AWS_DEFAULT_REGION" \
        -var-file="$PACKER_CONFIG_FILE" \
        "$PACKER_TEMPLATE"
    - echo "üéâ Configuration is valid!"
  only:
    - main
    - merge_requests

# Build the AMI
build-job:
  stage: build
  image: $PACKER_IMAGE
  script:
    - echo "üèóÔ∏è Building Ubuntu AMI..."
    - packer build \
        -var "aws_region=$AWS_DEFAULT_REGION" \
        -var-file="$PACKER_CONFIG_FILE" \
        "$PACKER_TEMPLATE"
    - echo "üéâ AMI build completed successfully!"
  artifacts:
    reports:
      junit: packer-build-report.xml
    paths:
      - "*.log"
    expire_in: 1 week
  only:
    - main
  when: manual  # Manual trigger for cost control

# Deploy/Report stage
deploy-job:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache aws-cli
  script:
    - echo "üöÄ AMI deployment completed!"
    - echo "Your new AMI is now available in AWS region: $AWS_DEFAULT_REGION"
    - echo "üîç You can find it in the AWS EC2 console under 'AMIs'"
    - |
      echo "üí° To launch an instance from this AMI:"
      echo "  1. Go to EC2 console"
      echo "  2. Click 'Launch Instance'"
      echo "  3. Search for AMIs with your config's name prefix"
      echo "  4. Select your custom AMI and launch!"
    - echo "‚ú® Happy computing!"
  only:
    - main
  dependencies:
    - build-job

# Optional: Cleanup old AMIs (commented out for safety)
# cleanup-job:
#   stage: deploy
#   image: alpine:latest
#   before_script:
#     - apk add --no-cache aws-cli
#   script:
#     - echo "üßπ Cleaning up old AMIs..."
#     - echo "Customize the cleanup logic as needed"
#   only:
#     - main
#   when: manual
