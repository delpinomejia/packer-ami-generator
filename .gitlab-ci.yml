# =====================================================
# GitLab CI Pipeline for Ubuntu 24.04 LTS AMI Builder
# Production-Ready Pipeline with AWS Integration
# =====================================================
#
# This pipeline automates the creation of custom Ubuntu AMIs
# with Docker, Nginx, ClamAV, and development tools.
#
# Pipeline Stages:
#   1. validate - Template syntax validation
#   2. cost-estimate - Build cost calculation
#   3. build - AMI creation (manual trigger)
#   4. verify - AMI availability verification
#   5. report - Comprehensive build reporting
#
# Prerequisites:
#   - AWS credentials configured in GitLab CI/CD variables
#   - Docker runner with appropriate AWS permissions
#
# Cost Control:
#   - Build stage requires manual approval
#   - Estimated cost: $0.12-$0.22 per build (t3.small)
#
# Author: DevOps Team
# Repository: packer-ami-generator-v1
# =====================================================

stages:
  - validate
  - cost-estimate
  - build
  - verify
  - report

variables:
  # Packer configuration
  PACKER_LOG: "1"
  PACKER_LOG_PATH: "packer-build.log"
  PACKER_CONFIG_FILE: "variables.pkrvars.hcl"
  PACKER_TEMPLATE: "packer.pkr.hcl"
  
  # Docker images
  PACKER_IMAGE: "hashicorp/packer:latest"
  AWS_CLI_IMAGE: "amazon/aws-cli:latest"
  
  # Build configuration
  AMI_NAME_PREFIX: "ubuntu-24-04-custom"

# =====================================================
# Stage 1: Validate Configuration
# =====================================================
validate-configuration:
  stage: validate
  image: $PACKER_IMAGE
  tags:
    - docker
  before_script:
    - echo "üîß Setting up validation environment..."
    - echo "Packer version:"
    - packer version
    - echo "AWS Region: $AWS_DEFAULT_REGION"
    - echo "Template: $PACKER_TEMPLATE"
    - echo "Variables: $PACKER_CONFIG_FILE"
  script:
    - echo "‚úÖ Validating Packer template syntax..."
    - packer validate -var-file="$PACKER_CONFIG_FILE" "$PACKER_TEMPLATE"
    - echo "‚úÖ Template validation completed successfully!"
    - echo "üìã Configuration Summary:"
    - echo "  - Base Image: Ubuntu 24.04 LTS"
    - echo "  - Instance Type: t3.small"
    - echo "  - Software: Docker, Nginx, ClamAV, Dev Tools"
    - echo "  - Provisioner: Shell Scripts"
  artifacts:
    reports:
      junit: validation-report.xml
    expire_in: 1 day
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

# =====================================================
# Stage 2: Cost Estimation
# =====================================================
cost-estimation:
  stage: cost-estimate
  image: $AWS_CLI_IMAGE
  tags:
    - docker
  before_script:
    - echo "üí∞ Calculating estimated build costs..."
  script:
    - echo "üìä Cost Analysis for AMI Build:"
    - echo "  Instance Type: t3.small (~\$0.0208/hour)"
    - echo "  Estimated Build Time: 15-30 minutes"
    - echo "  Estimated Instance Cost: \$0.11 - \$0.21"
    - echo "  EBS Storage Cost: ~\$0.01"
    - echo "  Data Transfer Cost: Minimal"
    - echo "  TOTAL ESTIMATED COST: \$0.12 - \$0.22"
    - echo "‚ö†Ô∏è  Actual costs may vary based on build duration and AWS pricing"
    - echo "üí° Build will be triggered manually for cost control"
  artifacts:
    reports:
      junit: cost-estimate-report.xml
    expire_in: 1 day
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

# =====================================================
# Stage 3: Build AMI (Manual Trigger)
# =====================================================
build-ami:
  stage: build
  image: $PACKER_IMAGE
  tags:
    - docker
  timeout: 45m  # Allow up to 45 minutes for build
  before_script:
    - echo "üèóÔ∏è Starting AMI build process..."
    - echo "Build started at: $(date)"
    - echo "AWS Region: $AWS_DEFAULT_REGION"
    - echo "Expected build time: 15-30 minutes"
    - echo "Estimated cost: \$0.12 - \$0.22"
    - echo "üìã Software to be installed:"
    - echo "  ‚úÖ Docker CE + docker-compose"
    - echo "  ‚úÖ Nginx web server"
    - echo "  ‚úÖ ClamAV antivirus"
    - echo "  ‚úÖ Development tools (git, curl, wget, vim, htop)"
    - echo "  ‚úÖ Python3, pip, Node.js, npm"
    - echo "üöÄ Launching EC2 instance and starting build..."
  script:
    - echo "üî• Executing Packer build with comprehensive logging..."
    - packer build \
        -var-file="$PACKER_CONFIG_FILE" \
        "$PACKER_TEMPLATE" | tee "$PACKER_LOG_PATH"
    - echo "üéâ AMI build completed successfully!"
    - echo "Build finished at: $(date)"
    - echo "üìù Extracting AMI details from build log..."
    - AMI_ID=$(grep -oP 'ami-[a-z0-9]+' "$PACKER_LOG_PATH" | tail -1)
    - echo "üéØ Created AMI ID: $AMI_ID"
    - echo "AMI_ID=$AMI_ID" > ami-details.env
  artifacts:
    reports:
      dotenv: ami-details.env
    paths:
      - "$PACKER_LOG_PATH"
      - "ami-details.env"
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
  allow_failure: false

# =====================================================
# Stage 4: Verify AMI Creation
# =====================================================
verify-ami:
  stage: verify
  image: $AWS_CLI_IMAGE
  tags:
    - docker
  dependencies:
    - build-ami
  before_script:
    - echo "üîç Verifying AMI creation and availability..."
    - source ami-details.env
    - echo "Verifying AMI: $AMI_ID"
  script:
    - echo "‚úÖ Checking AMI status in AWS..."
    - aws ec2 describe-images --image-ids $AMI_ID --region $AWS_DEFAULT_REGION
    - echo "‚úÖ AMI verification completed successfully!"
    - echo "üìã AMI Details:"
    - aws ec2 describe-images --image-ids $AMI_ID --region $AWS_DEFAULT_REGION --query 'Images[0].{Name:Name,State:State,Architecture:Architecture,VirtualizationType:VirtualizationType,RootDeviceType:RootDeviceType}' --output table
  artifacts:
    reports:
      junit: ami-verification-report.xml
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# =====================================================
# Stage 5: Generate Build Report
# =====================================================
generate-report:
  stage: report
  image: alpine:latest
  tags:
    - docker
  dependencies:
    - build-ami
    - verify-ami
  before_script:
    - apk add --no-cache curl jq
    - source ami-details.env
  script:
    - echo "üìä Generating comprehensive build report..."
    - echo "==================================================="
    - echo "     AWS AMI BUILD REPORT - SUCCESS! üéâ"
    - echo "==================================================="
    - echo "Build Date: $(date)"
    - echo "AMI ID: $AMI_ID"
    - echo "Region: $AWS_DEFAULT_REGION"
    - echo "Base Image: Ubuntu 24.04 LTS"
    - echo "Instance Type: t3.small"
    - echo ""
    - echo "üì¶ Installed Software:"
    - echo "  ‚úÖ Docker CE + docker-compose"
    - echo "  ‚úÖ Nginx web server"
    - echo "  ‚úÖ ClamAV antivirus"
    - echo "  ‚úÖ Development tools (git, curl, wget, vim, htop)"
    - echo "  ‚úÖ Python3, pip, Node.js, npm"
    - echo ""
    - echo "üí∞ Cost Analysis:"
    - echo "  Estimated Cost: \$0.12 - \$0.22"
    - echo "  Build Duration: ~15-30 minutes"
    - echo "  Instance Type: t3.small"
    - echo ""
    - echo "üîó Next Steps:"
    - echo "  1. AMI is ready for use in production"
    - echo "  2. Launch instances using AMI ID: $AMI_ID"
    - echo "  3. Verify software installation on launched instances"
    - echo "  4. Consider AMI lifecycle management"
    - echo "==================================================="
    - echo "‚úÖ BUILD COMPLETED SUCCESSFULLY!"
    - echo "==================================================="
  artifacts:
    reports:
      junit: build-report.xml
    paths:
      - "build-report.txt"
    expire_in: 1 month
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# =====================================================
# Optional: AMI Cleanup (Commented for Safety)
# =====================================================
# cleanup-old-amis:
#   stage: report
#   image: $AWS_CLI_IMAGE
#   tags:
#     - docker
#   script:
#     - echo "üßπ AMI cleanup can be implemented here"
#     - echo "‚ö†Ô∏è  Always verify AMIs before deletion!"
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#       when: manual
#   allow_failure: true
